
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo_hoc2;

import java_cup.runtime.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AnalizadorSintacticoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\011\000" +
    "\002\005\014\000\002\005\010\000\002\005\011\000\002" +
    "\005\004\000\002\005\005\000\002\012\003\000\002\010" +
    "\003\000\002\014\003\000\002\007\003\000\002\015\003" +
    "\000\002\017\003\000\002\017\004\000\002\013\006\000" +
    "\002\022\003\000\002\016\007\000\002\021\003\000\002" +
    "\020\004\000\002\011\002\000\002\006\003\000\002\006" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\006\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\024\002\001\023\001\024\001\025\001\027" +
    "\001\033\001\034\001\036\001\053\001\001\002\000\024" +
    "\002\014\023\021\024\007\025\016\027\020\033\011\034" +
    "\023\036\015\053\006\001\002\000\020\005\027\020\036" +
    "\035\025\036\031\037\030\040\035\052\034\001\002\000" +
    "\022\023\021\024\007\025\016\027\020\033\011\034\023" +
    "\036\015\053\006\001\002\000\020\005\ufff2\020\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\052\ufff2\001\002\000\004" +
    "\022\160\001\002\000\004\020\ufff1\001\002\000\024\002" +
    "\uffff\023\uffff\024\uffff\025\uffff\027\uffff\033\uffff\034\uffff" +
    "\036\uffff\053\uffff\001\002\000\020\005\027\020\036\035" +
    "\025\036\031\037\030\040\035\052\034\001\002\000\004" +
    "\002\000\001\002\000\004\010\137\001\002\000\020\005" +
    "\ufff0\020\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\052\ufff0" +
    "\001\002\000\004\020\144\001\002\000\020\005\uffef\020" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\052\uffef\001\002" +
    "\000\020\005\027\020\036\035\025\036\031\037\030\040" +
    "\035\052\034\001\002\000\020\005\027\020\036\035\025" +
    "\036\031\037\030\040\035\052\034\001\002\000\004\022" +
    "\024\001\002\000\032\002\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\053" +
    "\ufff5\054\ufff5\001\002\000\074\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\055\uffe4" +
    "\001\002\000\074\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\033\uffe1\034" +
    "\uffe1\036\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\053\uffe1\055\uffe1\001\002\000" +
    "\020\005\027\020\036\035\025\036\031\037\030\040\035" +
    "\052\034\001\002\000\074\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\033" +
    "\uffe2\034\uffe2\036\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\055\uffe2\001" +
    "\002\000\100\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\137" +
    "\011\uffe3\012\136\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\033\uffe3\034\uffe3\036\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\055\uffe3" +
    "\001\002\000\004\053\110\001\002\000\072\004\056\005" +
    "\060\006\047\007\050\011\062\013\045\014\057\015\040" +
    "\016\061\017\053\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\027\ufff3\033\ufff3\034\ufff3\036\ufff3\042\046\043\041" +
    "\044\051\045\054\046\043\047\052\050\055\051\044\053" +
    "\ufff3\001\002\000\020\005\027\020\036\035\025\036\031" +
    "\037\030\040\035\052\034\001\002\000\004\020\104\001" +
    "\002\000\020\005\027\020\036\035\025\036\031\037\030" +
    "\040\035\052\034\001\002\000\050\004\056\005\060\006" +
    "\047\007\050\011\062\013\045\014\057\015\040\016\061" +
    "\017\053\021\042\042\046\043\041\044\051\045\054\046" +
    "\043\047\052\050\055\051\044\001\002\000\020\005\027" +
    "\020\036\035\025\036\031\037\030\040\035\052\034\001" +
    "\002\000\020\005\027\020\036\035\025\036\031\037\030" +
    "\040\035\052\034\001\002\000\074\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\033\uffdc\034\uffdc\036\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\055" +
    "\uffdc\001\002\000\020\005\027\020\036\035\025\036\031" +
    "\037\030\040\035\052\034\001\002\000\020\005\027\020" +
    "\036\035\025\036\031\037\030\040\035\052\034\001\002" +
    "\000\074\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\027\uffce\033\uffce\034\uffce\036" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\053\uffce\055\uffce\001\002\000\020\005" +
    "\027\020\036\035\025\036\031\037\030\040\035\052\034" +
    "\001\002\000\020\005\027\020\036\035\025\036\031\037" +
    "\030\040\035\052\034\001\002\000\020\005\027\020\036" +
    "\035\025\036\031\037\030\040\035\052\034\001\002\000" +
    "\020\005\027\020\036\035\025\036\031\037\030\040\035" +
    "\052\034\001\002\000\020\005\027\020\036\035\025\036" +
    "\031\037\030\040\035\052\034\001\002\000\020\005\027" +
    "\020\036\035\025\036\031\037\030\040\035\052\034\001" +
    "\002\000\020\005\027\020\036\035\025\036\031\037\030" +
    "\040\035\052\034\001\002\000\020\005\027\020\036\035" +
    "\025\036\031\037\030\040\035\052\034\001\002\000\020" +
    "\005\027\020\036\035\025\036\031\037\030\040\035\052" +
    "\034\001\002\000\020\005\027\020\036\035\025\036\031" +
    "\037\030\040\035\052\034\001\002\000\020\005\027\020" +
    "\036\035\025\036\031\037\030\040\035\052\034\001\002" +
    "\000\020\005\027\020\036\035\025\036\031\037\030\040" +
    "\035\052\034\001\002\000\020\005\027\020\036\035\025" +
    "\036\031\037\030\040\035\052\034\001\002\000\074\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\011\062\013\045\014\057" +
    "\015\040\016\061\017\053\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\027\uffd9\033\uffd9\034\uffd9\036\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\055\uffd9\001\002\000\074\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\027\uffcb\033\uffcb\034\uffcb\036\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb" +
    "\055\uffcb\001\002\000\074\004\uffdf\005\uffdf\006\047\007" +
    "\050\011\062\013\045\014\057\015\040\016\061\017\053" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\033" +
    "\uffdf\034\uffdf\036\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\055\uffdf\001" +
    "\002\000\074\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\061\017\053\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\053\uffcd\055\uffcd\001\002\000\074" +
    "\004\uffe0\005\uffe0\006\047\007\050\011\062\013\045\014" +
    "\057\015\040\016\061\017\053\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\033\uffe0\034\uffe0\036\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\053\uffe0\055\uffe0\001\002\000\074\004\056\005" +
    "\060\006\047\007\050\011\062\013\045\014\057\015\040" +
    "\016\061\017\053\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\033\uffd4\034\uffd4\036\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\053" +
    "\uffd4\055\uffd4\001\002\000\074\004\056\005\060\006\047" +
    "\007\050\011\062\013\045\014\057\015\040\016\061\017" +
    "\053\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\055\uffd7" +
    "\001\002\000\074\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\027\uffca\033\uffca\034" +
    "\uffca\036\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\053\uffca\055\uffca\001\002\000" +
    "\074\004\056\005\060\006\047\007\050\011\062\013\045" +
    "\014\057\015\040\016\061\017\053\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\033\uffd5\034\uffd5\036\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\053\uffd5\055\uffd5\001\002\000\074\004\056" +
    "\005\060\006\047\007\050\011\062\013\045\014\057\015" +
    "\040\016\061\017\053\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\033\uffd8\034\uffd8\036\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\053\uffd8\055\uffd8\001\002\000\074\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\011\062\013\045\014\057\015\040\016\061" +
    "\017\053\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\027" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\055" +
    "\uffdd\001\002\000\074\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\011\062\013\045\014\057\015\040\016\061\017\053\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde\033\uffde" +
    "\034\uffde\036\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\053\uffde\055\uffde\001\002" +
    "\000\074\004\056\005\060\006\047\007\050\011\062\013" +
    "\045\014\057\015\040\016\061\017\053\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\027\uffd1\033\uffd1\034\uffd1\036" +
    "\uffd1\042\uffd1\043\041\044\051\045\054\046\043\047\052" +
    "\050\055\051\044\053\uffd1\055\uffd1\001\002\000\074\004" +
    "\056\005\060\006\047\007\050\011\062\013\045\014\057" +
    "\015\040\016\061\017\053\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\027\uffd3\033\uffd3\034\uffd3\036\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\053\uffd3\055\uffd3\001\002\000\074\004\056\005\060" +
    "\006\047\007\050\011\062\013\045\014\057\015\040\016" +
    "\061\017\053\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\027\uffd6\033\uffd6\034\uffd6\036\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\053\uffd6" +
    "\055\uffd6\001\002\000\074\004\056\005\060\006\047\007" +
    "\050\011\062\013\045\014\057\015\040\016\061\017\053" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\033" +
    "\uffd2\034\uffd2\036\uffd2\042\uffd2\043\uffd2\044\051\045\054" +
    "\046\043\047\052\050\055\051\044\053\uffd2\055\uffd2\001" +
    "\002\000\074\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\061\017\053\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\033\uffcc\034\uffcc" +
    "\036\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\053\uffcc\055\uffcc\001\002\000\020" +
    "\005\027\020\036\035\025\036\031\037\030\040\035\052" +
    "\034\001\002\000\050\004\056\005\060\006\047\007\050" +
    "\011\062\013\045\014\057\015\040\016\061\017\053\021" +
    "\106\042\046\043\041\044\051\045\054\046\043\047\052" +
    "\050\055\051\044\001\002\000\074\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\033\uffdb\034\uffdb\036\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\055" +
    "\uffdb\001\002\000\074\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\011\062\013\045\014\057\015\040\016\061\017\053\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\055\uffd0\001\002" +
    "\000\004\030\114\001\002\000\020\005\027\020\036\035" +
    "\025\036\031\037\030\040\035\052\034\001\002\000\010" +
    "\030\uffee\031\uffee\054\uffee\001\002\000\010\030\114\031" +
    "\115\054\121\001\002\000\020\005\uffe9\020\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\052\uffe9\001\002\000\004\055" +
    "\uffeb\001\002\000\004\054\130\001\002\000\010\030\uffed" +
    "\031\uffed\054\uffed\001\002\000\004\055\123\001\002\000" +
    "\032\002\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\036\uffe7\053\uffe7\054\uffe7\001" +
    "\002\000\032\002\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\053\ufff7\054" +
    "\ufff7\001\002\000\022\023\021\024\007\025\016\027\020" +
    "\033\011\034\023\036\015\053\006\001\002\000\004\032" +
    "\125\001\002\000\004\022\127\001\002\000\004\054\uffec" +
    "\001\002\000\010\030\uffe8\031\uffe8\054\uffe8\001\002\000" +
    "\032\002\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\036\uffe7\053\uffe7\054\uffe7\001" +
    "\002\000\032\002\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\053\ufff6\054" +
    "\ufff6\001\002\000\050\004\056\005\060\006\047\007\050" +
    "\011\062\013\045\014\057\015\040\016\061\017\053\042" +
    "\046\043\041\044\051\045\054\046\043\047\052\050\055" +
    "\051\044\055\133\001\002\000\022\023\021\024\007\025" +
    "\016\027\020\033\011\034\023\036\015\053\006\001\002" +
    "\000\004\032\125\001\002\000\010\030\uffea\031\uffea\054" +
    "\uffea\001\002\000\074\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\055\uffcf\001\002" +
    "\000\020\005\027\020\036\035\025\036\031\037\030\040" +
    "\035\052\034\001\002\000\074\004\056\005\060\006\047" +
    "\007\050\011\062\013\045\014\057\015\040\016\061\017" +
    "\053\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\027\ufffe" +
    "\033\ufffe\034\ufffe\036\ufffe\042\046\043\041\044\051\045" +
    "\054\046\043\047\052\050\055\051\044\053\ufffe\055\ufffe" +
    "\001\002\000\074\004\uffda\005\uffda\006\uffda\007\uffda\011" +
    "\062\013\045\014\057\015\040\016\061\017\053\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda\033\uffda\034" +
    "\uffda\036\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\053\uffda\055\uffda\001\002\000" +
    "\050\004\056\005\060\006\047\007\050\011\062\013\045" +
    "\014\057\015\040\016\061\017\053\022\143\042\046\043" +
    "\041\044\051\045\054\046\043\047\052\050\055\051\044" +
    "\001\002\000\032\002\ufffc\023\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc\053\ufffc" +
    "\054\ufffc\001\002\000\004\036\015\001\002\000\004\022" +
    "\146\001\002\000\020\005\027\020\036\035\025\036\031" +
    "\037\030\040\035\052\034\001\002\000\004\022\150\001" +
    "\002\000\020\005\027\020\036\035\025\036\031\037\030" +
    "\040\035\052\034\001\002\000\004\021\152\001\002\000" +
    "\022\023\021\024\007\025\016\027\020\033\011\034\023" +
    "\036\015\053\006\001\002\000\032\002\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\036\uffe7\053\uffe7\054\uffe7\001\002\000\032\002\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\036\ufff8\053\ufff8\054\ufff8\001\002\000\022\023" +
    "\021\024\007\025\016\027\020\033\011\034\023\036\015" +
    "\053\006\001\002\000\032\002\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\053\uffe7\054\uffe7\001\002\000\032\002\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\036\ufffb\053\ufffb\054\ufffb\001\002\000\032\002\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\036\ufffd\053\ufffd\054\ufffd\001\002\000\024\023" +
    "\021\024\007\025\016\027\020\033\011\034\023\036\015" +
    "\053\006\054\163\001\002\000\024\023\uffe6\024\uffe6\025" +
    "\uffe6\027\uffe6\033\uffe6\034\uffe6\036\uffe6\053\uffe6\054\uffe6" +
    "\001\002\000\032\002\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\053\ufff4" +
    "\054\ufff4\001\002\000\024\023\uffe5\024\uffe5\025\uffe5\027" +
    "\uffe5\033\uffe5\034\uffe5\036\uffe5\053\uffe5\054\uffe5\001\002" +
    "\000\022\023\021\024\007\025\016\027\020\033\011\034" +
    "\023\036\015\053\006\001\002\000\032\002\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\036\uffe7\053\uffe7\054\uffe7\001\002\000\032\002\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\170\027\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\036\ufffa\053\ufffa\054\ufffa\001\002\000\022" +
    "\023\021\024\007\025\016\027\020\033\011\034\023\036" +
    "\015\053\006\001\002\000\032\002\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\036" +
    "\uffe7\053\uffe7\054\uffe7\001\002\000\032\002\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\036\ufff9\053\ufff9\054\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\003\001\001\000\016\003\007\005" +
    "\011\007\004\010\012\014\016\015\021\001\001\000\010" +
    "\003\025\004\032\012\164\001\001\000\020\003\007\005" +
    "\161\006\160\007\004\010\012\014\016\015\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\025\004\032\012\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\025\004\141" +
    "\001\001\000\010\003\025\004\032\012\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\025\004\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\025\004\106\001\001\000\002\001\001\000" +
    "\006\003\025\004\036\001\001\000\002\001\001\000\006" +
    "\003\025\004\102\001\001\000\006\003\025\004\101\001" +
    "\001\000\002\001\001\000\006\003\025\004\100\001\001" +
    "\000\006\003\025\004\077\001\001\000\002\001\001\000" +
    "\006\003\025\004\076\001\001\000\006\003\025\004\075" +
    "\001\001\000\006\003\025\004\074\001\001\000\006\003" +
    "\025\004\073\001\001\000\006\003\025\004\072\001\001" +
    "\000\006\003\025\004\071\001\001\000\006\003\025\004" +
    "\070\001\001\000\006\003\025\004\067\001\001\000\006" +
    "\003\025\004\066\001\001\000\006\003\025\004\065\001" +
    "\001\000\006\003\025\004\064\001\001\000\006\003\025" +
    "\004\063\001\001\000\006\003\025\004\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\025\004\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\111" +
    "\017\112\021\110\001\001\000\006\003\025\004\131\001" +
    "\001\000\002\001\001\000\012\013\115\016\116\021\110" +
    "\022\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\121\001\001\000\002\001\001\000\016\003\007\005" +
    "\123\007\004\010\012\014\016\015\021\001\001\000\004" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\007\005\133\007\004\010" +
    "\012\014\016\015\021\001\001\000\004\020\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\025\004" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\144\001\001\000" +
    "\002\001\001\000\010\003\025\004\032\012\146\001\001" +
    "\000\002\001\001\000\010\003\025\004\032\012\150\001" +
    "\001\000\002\001\001\000\016\003\007\005\152\007\004" +
    "\010\012\014\016\015\021\001\001\000\004\011\153\001" +
    "\001\000\002\001\001\000\016\003\007\005\155\007\004" +
    "\010\012\014\016\015\021\001\001\000\004\011\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\007" +
    "\005\163\007\004\010\012\014\016\015\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\007\005\165\007\004\010\012\014\016\015\021\001" +
    "\001\000\004\011\166\001\001\000\002\001\001\000\016" +
    "\003\007\005\170\007\004\010\012\014\016\015\021\001" +
    "\001\000\004\011\171\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    FrmPrincipal2  frmInterfaz; /*= new FrmPrincipal2()*/
    Float  variables[] = new Float[26];
    MaquinaHoc4  maquinaHoc4;

    public void report_error(String mensaje,Object info){
        StringBuilder m = new StringBuilder("Error");
        if(info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if(s.left >=0){
                m.append(" en la linea " + (s.left+1));
                if(s.right>=0)
                    m.append(", columna " + (s.right+1));
            }
        }
        m.append("  : " + mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info){
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list ::= list stmt 
            {
              Object RESULT =null;
		          /*
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.PRINT;
                                    
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins2.Instruc = EnumInstrMaq.STOP;

                                    maquinaHoc4.code(ins1);   
                                    */
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asgn ::= VAR OpAsig expr 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		    
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.VARPUSH;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                    ins2.symbolHoc = v;
                                    
                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins3.Instruc = EnumInstrMaq.ASSIGN;

                                    maquinaHoc4.code3(ins1, ins2, ins3);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asgn",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= asgn SEMIC 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= PRINT expr SEMIC 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.PRINT;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= while cond stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+1]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind4 ;
                                    maquinaHoc4.Prog[ind1+2]=ins2;
                                    
                                    RESULT = ind1;
                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= if cond stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+1]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind4 ;
                                    maquinaHoc4.Prog[ind1+3]=ins2;
                                    RESULT = ind1; 
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= if cond stmt end ELSE stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind6 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind7 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+1]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind6 ;
                                    maquinaHoc4.Prog[ind1+2]=ins2;

                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.JUMP;
                                    ins3.jump = ind7 ;
                                    maquinaHoc4.Prog[ind1+3]=ins3;
                                    RESULT = ind1; 
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= for ParIzq asgn SEMIC cond SEMIC cond ParDer stmt end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind5 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind6 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins0 = new InstrucPrograma();
                                    ins0.TipInstr = EnumTipoInstr.JUMP;
                                    ins0.jump = ind2 ;
                                    maquinaHoc4.Prog[ind1+1]=ins0;

                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+2]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind4 ;
                                    maquinaHoc4.Prog[ind1+3]=ins2;

                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.JUMP;
                                    ins3.jump = ind5 ;
                                    maquinaHoc4.Prog[ind1+4]=ins3;

                                    InstrucPrograma ins4 = new InstrucPrograma();
                                    ins4.TipInstr = EnumTipoInstr.JUMP;
                                    ins4.jump = ind6 ;
                                    maquinaHoc4.Prog[ind1+5]=ins4;
                                    
                                    RESULT = ind1;                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= switch cond LLAVE_IZQ case_list LLAVE_DER end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+1]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind4 ;
                                    maquinaHoc4.Prog[ind1+3]=ins2;
                                    RESULT = ind1;                                   
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= switch cond LLAVE_IZQ case_list defaultcase LLAVE_DER end 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ind5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind5 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind3 ;
                                    maquinaHoc4.Prog[ind1+1]=ins1;

                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.JUMP;
                                    ins2.jump = ind4 ;
                                    maquinaHoc4.Prog[ind1+2]=ins2;

                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.JUMP;
                                    ins3.jump = ind5 ;
                                    maquinaHoc4.Prog[ind1+3]=ins3;

                                    RESULT = ind1;                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= CONTINUE SEMIC 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ind1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.CONTINUE;
                                    maquinaHoc4.code(ins1);
                                    RESULT = maquinaHoc4.code(ins1);
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= LLAVE_IZQ stmtlist LLAVE_DER 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                    RESULT = ind;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cond ::= expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    System.out.println("Evaluating condition...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.STOP;
    maquinaHoc4.code(ins1);
    System.out.println("Condition evaluated. Instruction STOP generated.");
    RESULT = ind1;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cond",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while ::= WHILE 
            {
              Integer RESULT =null;
		
    System.out.println("Entering WHILE loop...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.WHILECODE;
    
    InstrucPrograma ins2 = new InstrucPrograma();
    ins2.TipInstr = EnumTipoInstr.INSTRUC;
    ins2.Instruc = EnumInstrMaq.STOP;
    
    InstrucPrograma ins3 = new InstrucPrograma();
    ins3.TipInstr = EnumTipoInstr.INSTRUC;
    ins3.Instruc = EnumInstrMaq.STOP;

    RESULT = maquinaHoc4.code3(ins1, ins2, ins3);
    System.out.println("WHILE loop code generated.");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // for ::= FOR 
            {
              Integer RESULT =null;
		
    System.out.println("Generating FOR loop...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.FORCODE;
    
    InstrucPrograma ins0 = new InstrucPrograma();
    ins0.TipInstr = EnumTipoInstr.INSTRUC;
    ins0.Instruc = EnumInstrMaq.STOP;

    InstrucPrograma ins2 = new InstrucPrograma();
    ins2.TipInstr = EnumTipoInstr.INSTRUC;
    ins2.Instruc = EnumInstrMaq.STOP;
    
    InstrucPrograma ins3 = new InstrucPrograma();
    ins3.TipInstr = EnumTipoInstr.INSTRUC;
    ins3.Instruc = EnumInstrMaq.STOP;

    InstrucPrograma ins4 = new InstrucPrograma();
    ins4.TipInstr = EnumTipoInstr.INSTRUC;
    ins4.Instruc = EnumInstrMaq.STOP;

    InstrucPrograma ins5 = new InstrucPrograma();
    ins5.TipInstr = EnumTipoInstr.INSTRUC;
    ins5.Instruc = EnumInstrMaq.STOP;

    RESULT = maquinaHoc4.code6(ins1, ins0, ins2, ins3, ins4, ins5);
    System.out.println("FOR loop code generated.");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if ::= IF 
            {
              Integer RESULT =null;
		
    System.out.println("Processing IF statement...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.IFCODE;
    
    InstrucPrograma ins2 = new InstrucPrograma();
    ins2.TipInstr = EnumTipoInstr.INSTRUC;
    ins2.Instruc = EnumInstrMaq.STOP;
    
    InstrucPrograma ins3 = new InstrucPrograma();
    ins3.TipInstr = EnumTipoInstr.INSTRUC;
    ins3.Instruc = EnumInstrMaq.STOP;
    
    InstrucPrograma ins4 = new InstrucPrograma();
    ins4.TipInstr = EnumTipoInstr.INSTRUC;
    ins4.Instruc = EnumInstrMaq.STOP;

    RESULT = maquinaHoc4.code(ins1);
    maquinaHoc4.code3(ins2, ins3, ins4);
    System.out.println("IF statement code generated.");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // switch ::= SWITCH 
            {
              Integer RESULT =null;
		
    System.out.println("Processing SWITCH statement...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.SWITCHCODE;    

    RESULT = maquinaHoc4.code(ins1);

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // case_list ::= case 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		                                   
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_list",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // case_list ::= case_list case 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    /*InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.JUMP;
                                    ins1.jump = ind2 ;
                                    maquinaHoc4.Prog[ind1+2]=ins1;*/

                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_list",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defaultcase ::= defaultbase DOS_P stmt break 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
   // En defaultbase:ind1 generé la instrucción DEFAULT en code(...),
   // devuelvo esa posición en RESULT, p.ej. `ind1`.

   /*InstrucPrograma ins1 = new InstrucPrograma();
   ins1.TipInstr = EnumTipoInstr.JUMP;
   ins1.jump = ind2; // salto al bloque stmt
   maquinaHoc4.Prog[ind1 + 1] = ins1;

   InstrucPrograma ins2 = new InstrucPrograma();
   ins2.TipInstr = EnumTipoInstr.JUMP;
   ins2.jump = ind3; // salto al end
   maquinaHoc4.Prog[ind1 + 2] = ins2;*/

   RESULT = ind1;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("defaultcase",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defaultbase ::= DEFAULT 
            {
              Integer RESULT =null;
		
   System.out.println("Processing DEFAULT statement...");
   InstrucPrograma ins1 = new InstrucPrograma();
   ins1.TipInstr = EnumTipoInstr.INSTRUC;
   ins1.Instruc = EnumInstrMaq.DEFAULT;

   // La posición donde se guarda la instrucción DEFAULT
   // la guardas en 'RESULT'
   RESULT = maquinaHoc4.code(ins1);
   System.out.println("DEFAULT statement processed.");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("defaultbase",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case ::= casebase expr DOS_P stmt break 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ind2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ind2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer ind2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind3 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ind4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind4 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		       
        InstrucPrograma ins2 = new InstrucPrograma();
        ins2.TipInstr = EnumTipoInstr.JUMP;
        ins2.jump = ind3;
        maquinaHoc4.Prog[ind1+1] = ins2;

        InstrucPrograma ins3 = new InstrucPrograma();
        ins3.TipInstr = EnumTipoInstr.JUMP;
        ins3.jump = ind4;
        maquinaHoc4.Prog[ind1+2] = ins3;

        RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // casebase ::= CASE 
            {
              Integer RESULT =null;
		
    System.out.println("Processing CASE statement...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.CASE;

    RESULT = maquinaHoc4.code(ins1);
    System.out.println("CASE statement processed.");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casebase",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // break ::= BREAK SEMIC 
            {
              Integer RESULT =null;
		
    System.out.println("Processing BREAK statement...");
    InstrucPrograma ins1 = new InstrucPrograma();
    ins1.TipInstr = EnumTipoInstr.INSTRUC;
    ins1.Instruc = EnumInstrMaq.STOP;

    maquinaHoc4.code(ins1);
    RESULT = maquinaHoc4.progp;
    System.out.println("BREAK statement processed.");

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("break",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // end ::= 
            {
              Integer RESULT =null;
		 
                                   InstrucPrograma ins1 = new InstrucPrograma();
                                   ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                   ins1.Instruc = EnumInstrMaq.STOP;
                                   maquinaHoc4.code(ins1);

                                   RESULT = maquinaHoc4.progp;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("end",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtlist ::= stmt 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    RESULT = ind;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmtlist",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtlist ::= stmtlist stmt 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                                    RESULT = ind;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmtlist",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= NUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.CONSTPUSH;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                    ins2.symbolHoc = n;

                                    RESULT = maquinaHoc4.code2(ins1, ins2);

                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= VAR 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.VARPUSH;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                    ins2.symbolHoc = v;
                                    
                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins3.Instruc = EnumInstrMaq.EVAL;

                                    RESULT = maquinaHoc4.code3(ins1, ins2, ins3);
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= CONST_PRED 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		SymbolHoc n = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.CONSTPUSH;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                    ins2.symbolHoc = n;

                                    RESULT = maquinaHoc4.code2(ins1, ins2);
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= asgn 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  RESULT = ind; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr OpSuma expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.ADD;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr OpResta expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.SUB;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr OpProd expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.MUL;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr OpDiv expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.DIV;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
                                        RESULT = ind;
                                    
                                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= BLTIN ParIzq expr ParDer 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                     ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.BLTIN;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.BLTIN;
                                    ins2.Func_BLTIN = v.FuncPredef;

                                    maquinaHoc4.code2(ins1, ins2);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= OpResta expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.NEGATE;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr OpPotencia expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.POWER;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr GT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.GT;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr GE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.GE;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.LT;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr LE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.LE;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr EQ expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.EQ;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr NE expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.NE;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr AND expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.AND;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr OR expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.OR;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NOT expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.NOT;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= VAR Aumento 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		SymbolHoc v = (SymbolHoc)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
                                    InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.VARPUSH;
                                    
                                    InstrucPrograma ins2 = new InstrucPrograma();
                                    ins2.TipInstr = EnumTipoInstr.SYMBOL;
                                    ins2.symbolHoc = v;
                                    
                                    InstrucPrograma ins3 = new InstrucPrograma();
                                    ins3.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins3.Instruc = EnumInstrMaq.EVAL;

                                    InstrucPrograma ins4 = new InstrucPrograma();
                                    ins4.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins4.Instruc = EnumInstrMaq.AUMENTO;

                                    RESULT = maquinaHoc4.code4(ins1,ins2,ins3,ins4);                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr Decremento 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.DECREMENTO;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr AumentoSum expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.AUMENTOSUM;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DecrementoRes expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.DECREMENTORES;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr AumentoProd expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.AUMENTOPROD;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DecrementoDiv expr 
            {
              Integer RESULT =null;
		int ind1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ind1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Integer ind1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  InstrucPrograma ins1 = new InstrucPrograma();
                                    ins1.TipInstr = EnumTipoInstr.INSTRUC;
                                    ins1.Instruc = EnumInstrMaq.DECREMENTODIV;
                                    maquinaHoc4.code(ins1);
                                    RESULT = ind1;                                    
                                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
