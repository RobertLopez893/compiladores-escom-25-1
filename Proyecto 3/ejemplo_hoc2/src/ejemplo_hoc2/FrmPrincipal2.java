/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ejemplo_hoc2;

import java_cup.runtime.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javafx.scene.control.TableColumn;
import javax.swing.table.DefaultTableModel;
//import javax.swing.table.JTableHeader;

/**
 *
 * @author ocax
 */
public class FrmPrincipal2 extends javax.swing.JFrame {

    AnalizadorSintactico Sintac;

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal2() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCadAnalizar = new javax.swing.JLabel();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaTokens = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextoAAnalizar = new javax.swing.JTextArea();
        BtnAnalizarSintact = new javax.swing.JButton();
        javax.swing.JScrollPane AreaTxtSintact = new javax.swing.JScrollPane();
        TxtAreaResultSintact = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCodigo = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaResultados = new javax.swing.JTextArea();
        jButtonExecute = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblCadAnalizar1 = new javax.swing.JLabel();
        lblCadAnalizar2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblCadAnalizar3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora HoC 5");

        lblCadAnalizar.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        lblCadAnalizar.setForeground(new java.awt.Color(153, 153, 0));
        lblCadAnalizar.setText("Código a ejecutar");

        btnAnalizar.setText("Analizar Lexicamente");
        btnAnalizar.setName("btnAnalizar"); // NOI18N
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtAreaTokens.setColumns(20);
        txtAreaTokens.setRows(5);
        txtAreaTokens.setName("txtTokens"); // NOI18N
        jScrollPane2.setViewportView(txtAreaTokens);

        TextoAAnalizar.setColumns(20);
        TextoAAnalizar.setRows(5);
        TextoAAnalizar.setName("TextoAAnalizar"); // NOI18N
        jScrollPane1.setViewportView(TextoAAnalizar);

        BtnAnalizarSintact.setText("Analizar Sintacticamente");
        BtnAnalizarSintact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAnalizarSintactActionPerformed(evt);
            }
        });

        TxtAreaResultSintact.setColumns(20);
        TxtAreaResultSintact.setRows(5);
        AreaTxtSintact.setViewportView(TxtAreaResultSintact);

        jTableCodigo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumInstrucción", "INST-SYMB-FUNC", "NAME", "VAL", "FUNCIÓN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableCodigo);

        jTextAreaResultados.setColumns(20);
        jTextAreaResultados.setRows(5);
        jScrollPane4.setViewportView(jTextAreaResultados);

        jButtonExecute.setText("Ejecutar código");
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Resultado de la ejecución");

        lblCadAnalizar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCadAnalizar1.setForeground(new java.awt.Color(51, 102, 0));
        lblCadAnalizar1.setText("Análisis Léxico");

        lblCadAnalizar2.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        lblCadAnalizar2.setForeground(new java.awt.Color(0, 0, 153));
        lblCadAnalizar2.setText("Análisis Sintáctico");

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("HoC Nivel 5");

        lblCadAnalizar3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCadAnalizar3.setForeground(new java.awt.Color(204, 0, 204));
        lblCadAnalizar3.setText("Arreglo del programa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCadAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lblCadAnalizar1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAnalizar)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblCadAnalizar3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(187, 187, 187)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(207, 470, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AreaTxtSintact, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnAnalizarSintact, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCadAnalizar2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblCadAnalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCadAnalizar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExecute)
                    .addComponent(btnAnalizar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lblCadAnalizar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AreaTxtSintact, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnAnalizarSintact)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCadAnalizar3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)))
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:

        Symbol simb;
        String Lexema = new String();
        String CadAux = new String();
        File ArchEntrada = new File("ArchEntrada.txt");
        PrintWriter escribir;
        txtAreaTokens.setText("");
        TxtAreaResultSintact.setText("");
        try {
            escribir = new PrintWriter(ArchEntrada);
            escribir.print(TextoAAnalizar.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal2.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Reader lector;
            lector = new BufferedReader(new FileReader("ArchEntrada.txt"));

            AnalizadorLexico AnalizLexico = new AnalizadorLexico(lector);

            AnalizLexico.maqHoc = new MaquinaHoc4();
            AnalizLexico.maqHoc.AreaResult = jTextAreaResultados;
//            AnalizLexico.maqHoc.jTablePila = jTablePila;

            /*
            SymbolHoc s;
            Iterator it  = AnalizLexico.maqHoc.TabSimb.ListaSimbolos.iterator();
           
            while(it.hasNext())
            {
                s=(SymbolHoc) it.next();
                CadAux = "-----------------------------------\n"
                        + " Symbol :" + s.name + "\n"+
                        "------------------------------------\n";
                        
                txtAreaTokens.append(CadAux);
            }
             */
            do {
                simb = AnalizLexico.next_token();
                CadAux = Integer.toString(simb.sym);
                Lexema = AnalizLexico.yytext();
                if (simb.sym == AnalizadorSintacticoSym.EOF) {
                    CadAux = "Token: " + CadAux + "\tIdentTOKEN: FIN \n";
                } else {
                    switch (simb.sym) {
                        case AnalizadorSintacticoSym.AND:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: AND\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OR:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OR\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.NOT:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: NOT\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.GT:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: GT\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.GE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: GE\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.LT:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: LT\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.LE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: LE\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.EQ:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: EQ\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.NE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: NE\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.LLAVE_DER:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: LLAVE_DER\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.LLAVE_IZQ:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: LLAVE_IZQ\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.SEMIC:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: SEMIC\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.PRINT:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: PRINT\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.WHILE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: WHILE\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.IF:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: IF\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.ELSE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: ELSE\t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.NUM:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: NUM \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.CONST_PRED:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: CONST_PRED \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.BLTIN:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: BLTIN \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpAsig:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpAsig \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpSuma:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpSUMA \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpResta:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpResta \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpProd:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpProd \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpDiv:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpDiv \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.ParIzq:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: ParIzq \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.ParDer:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: ParDer \t Lexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.error:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: ERROR \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.VAR:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: VAR \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.OpPotencia:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OpPotencia \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.SWITCH:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: SWITCH \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.CASE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: CASE \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.DEFAULT:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: DEFAULT \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.BREAK:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: BREAK \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.FOR:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: FOR \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.CONTINUE:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: CONTINUE \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.DOS_P:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: DOS_P \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.Aumento:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: Aumento \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.Decremento:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: Decremento \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.AumentoSum:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: AumentoSum \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.DecrementoRes:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: DecrementoRes \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.AumentoProd:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: AumentoProd \tLexema:" + Lexema + "\n";
                            break;
                        case AnalizadorSintacticoSym.DecrementoDiv:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: DecrementoDiv \tLexema:" + Lexema + "\n";
                            break;
                        default:
                            CadAux = "Token: " + CadAux + "\tIdentTOKEN: OTRO \tLexema:" + AnalizLexico.yytext() + "\n";
                    }
                }
                txtAreaTokens.append(CadAux);
            } while (simb.sym != AnalizadorSintacticoSym.EOF);
        } catch (IOException ex) {
            txtAreaTokens.append("Entro al catch \n");
            Logger.getLogger(FrmPrincipal2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void BtnAnalizarSintactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAnalizarSintactActionPerformed
        String CadAux = new String();

        String CadInst = new String();
        String Name = new String();
        String Valor = new String();
        String ptrFunc = new String();
        Object os[] = new Object[5];

        DefaultTableModel modeloTabla = (DefaultTableModel) jTableCodigo.getModel();
        InstrucPrograma instruc;
        AnalizadorLexico Lexic = null;
        try {
            Lexic = new AnalizadorLexico(new FileReader("ArchEntrada.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal2.class.getName()).log(Level.SEVERE, null, ex);
        }

        modeloTabla.setRowCount(0);
        try {

            Sintac = new AnalizadorSintactico(Lexic);

            Sintac.frmInterfaz = this;
            Sintac.maquinaHoc4 = new MaquinaHoc4(); // Se inicializa la tabla de simbolos
            Sintac.maquinaHoc4.AreaResult = jTextAreaResultados;
//            Sintac.maquinaHoc4.jTablePila = jTablePila;
            Lexic.maqHoc = Sintac.maquinaHoc4;

            SymbolHoc s;
            Iterator it = Lexic.maqHoc.TabSimb.ListaSimbolos.iterator();
            /*
            while(it.hasNext())
            {
                s=(SymbolHoc) it.next();
                CadAux = "-----------------------------------\n"
                        + " Symbol :" + s.name + "\n"+
                        "------------------------------------\n";
                        
                txtAreaTokens.append(CadAux);
            }*/

            try {
                /*
                AnalizadorSintactico Sintac = new AnalizadorSintactico(
                new AnalizadorLexico(new FileReader(args[0])));
                 */

                Object result = Sintac.parse().value;
                InstrucPrograma ins2 = new InstrucPrograma();
                ins2.TipInstr = EnumTipoInstr.INSTRUC;
                ins2.Instruc = EnumInstrMaq.STOP;
                Sintac.maquinaHoc4.code(ins2);
            } catch (Exception ex) {
                Logger.getLogger(FrmPrincipal2.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (int i = 0; i < Sintac.maquinaHoc4.progp; i++) {
                instruc = Sintac.maquinaHoc4.Prog[i];
                CadAux = "----ERROR-----";

                CadInst = "";
                Name = "";
                Valor = "";
                ptrFunc = "";

                switch (instruc.TipInstr) {
                    case INSTRUC:
                        switch (instruc.Instruc) {
                            case ADD:
                                CadAux = "instruc ADD";
                                CadInst = "ADD";
                                break;
                            case ASSIGN:
                                CadAux = "instruc ASSIGN";
                                CadInst = "ASSIGN";
                                break;
                            case BLTIN:
                                CadAux = "instruc BLTIN";
                                CadInst = "BLTIN";
                                break;
                            case CONSTPUSH:
                                CadAux = "instruc CONSTPUSH";
                                CadInst = "CONSTPUSH";
                                break;
                            case DIV:
                                CadAux = "instruc DIV";
                                CadInst = "DIV";
                                break;
                            case EVAL:
                                CadAux = "instruc EVAL";
                                CadInst = "EVAL";
                                break;
                            case MUL:
                                CadAux = "instruc MUL";
                                CadInst = "MUL";
                                break;
                            case NEGATE:
                                CadAux = "instruc NEGATE";
                                CadInst = "NEGATE";
                                break;
                            case POWER:
                                CadAux = "instruc POWER";
                                CadInst = "POWER";
                                break;
                            case PRINT:
                                CadAux = "instruc PRINT";
                                CadInst = "PRINT";
                                break;
                            case STOP:
                                CadAux = "instruc STOP";
                                CadInst = "STOP";
                                break;
                            case SUB:
                                CadAux = "instruc SUB";
                                CadInst = "SUB";
                                break;
                            case VARPUSH:
                                CadAux = "instruc VARPUSH";
                                CadInst = "VARPUSH";
                                break;
                            case AND:
                                CadAux = "instruc AND";
                                CadInst = "AND";
                                break;
                            case OR:
                                CadAux = "instruc OR";
                                CadInst = "OR";
                                break;
                            case NOT:
                                CadAux = "instruc NOT";
                                CadInst = "NOT";
                                break;
                            case GT:
                                CadAux = "instruc GT";
                                CadInst = "GT";
                                break;
                            case GE:
                                CadAux = "instruc GE";
                                CadInst = "GE";
                                break;
                            case LT:
                                CadAux = "instruc LT";
                                CadInst = "LT";
                                break;
                            case LE:
                                CadAux = "instruc LE";
                                CadInst = "LE";
                                break;
                            case NE:
                                CadAux = "instruc NE";
                                CadInst = "NE";
                                break;
                            case EQ:
                                CadAux = "instruc EQ";
                                CadInst = "EQ";
                                break;
                            case IFCODE:
                                CadAux = "instruc IF";
                                CadInst = "IFCODE";
                                break;
                            case WHILECODE:
                                CadAux = "instruc WHILE";
                                CadInst = "WHILECODE";
                                break;
                            case FORCODE:
                                CadAux = "instruc FOR";
                                CadInst = "FORCODE";
                                break;
                            case SWITCHCODE:
                                CadAux = "instruc SWITCH";
                                CadInst = "SWITCHCODE";
                                break;
                            case CONTINUE:
                                CadAux = "instruc CONTINUE";
                                CadInst = "CONTINUE";
                                break;
                            case AUMENTO:
                                CadAux = "instruc AUMENTO";
                                CadInst = "AUMENTO";
                                break;
                            case AUMENTOSUM:
                                CadAux = "instruc AUMENTOSUM";
                                CadInst = "AUMENTOSUM";
                                break;
                            case AUMENTOPROD:
                                CadAux = "instruc AUMENTOPROD";
                                CadInst = "AUMENTOPROD";
                                break;
                            case DECREMENTO:
                                CadAux = "instruc DECREMENTO";
                                CadInst = "DECREMENTO";
                                break;
                            case DECREMENTORES:
                                CadAux = "instruc DECREMENTORES";
                                CadInst = "DECREMENTORES";
                                break;
                            case DECREMENTODIV:
                                CadAux = "instruc DECREMENTORDIV";
                                CadInst = "DECREMENTODIV";
                                break;
                            case CASE:
                                CadAux = "instruc CASE";
                                CadInst = "CASE";
                                break;
                            case DEFAULT:
                                CadAux = "instruc DEFAULT";
                                CadInst = "DEFAULT";
                                break;
                        }
                        CadAux += "\n";
                        TxtAreaResultSintact.append(CadAux);
                        break;
                    case BLTIN:
                        CadInst = "FuncPredef";
                        switch (instruc.Func_BLTIN) {
                            case ABS:
                                CadAux = "bltin ABS";
                                Name = "abs";
                                ptrFunc = "ABS";
                                break;
                            case ATAN:
                                CadAux = "bltin ATAN";
                                Name = "atan";
                                ptrFunc = "ATAN";
                                break;
                            case COS:
                                CadAux = "bltin COS";
                                Name = "cos";
                                ptrFunc = "COS";
                                break;
                            case EXP:
                                CadAux = "bltin EXP";
                                Name = "exp";
                                ptrFunc = "EXP";
                                break;
                            case INTEGER:
                                CadAux = "bltin INTEGER";
                                Name = "integer";
                                ptrFunc = "INTEGER";
                                break;
                            case LOG10:
                                CadAux = "bltin LOG10";
                                Name = "log10";
                                ptrFunc = "LOG10";
                                break;
                            case LOG:
                                CadAux = "bltin LOG";
                                Name = "log";
                                ptrFunc = "LOG";
                                break;
                            case SIN:
                                CadAux = "bltin SIN";
                                Name = "sin";
                                ptrFunc = "SIN";
                                break;
                            case SQRT:
                                CadAux = "bltin SQRT";
                                Name = "sqrt";
                                ptrFunc = "SQRT";
                                break;
                        }
                        CadAux += "\n";
                        TxtAreaResultSintact.append(CadAux);
                        break;
                    case SYMBOL:
                        CadAux = "Symbol name: " + instruc.symbolHoc.name
                                + " val=" + Float.toString(instruc.symbolHoc.val);
                        CadAux += "\n";
                        TxtAreaResultSintact.append(CadAux);
                        switch (instruc.symbolHoc.TipoSymbol) {
                            case VAR:
                                CadInst = "VAR";
                                Name = instruc.symbolHoc.name;
                                Valor = Float.toString(instruc.symbolHoc.val);
                                ptrFunc = "";
                                break;
                            case UNDEF:
                                CadInst = "UNDEF";
                                Name = instruc.symbolHoc.name;
                                Valor = "---";
                                ptrFunc = "";
                                break;
                            case CONST_NUM:
                                CadInst = "CONST_NUM";
                                Name = instruc.symbolHoc.name;
                                Valor = Float.toString(instruc.symbolHoc.val);
                                ptrFunc = "";
                                break;
                            case CONST_PREDEF:
                                CadInst = "CONST_PREDEF";
                                Name = instruc.symbolHoc.name;
                                Valor = Float.toString(instruc.symbolHoc.val);
                                ptrFunc = "";
                                break;
                        }

                        break;
                    case JUMP:
                        CadInst = "JUMP";
                        Valor = Integer.toString(instruc.jump);
                        break;
                }
                os[0] = (Object) i;
                os[1] = (Object) CadInst;
                os[2] = (Object) Name;
                os[3] = (Object) Valor;
                os[4] = (Object) ptrFunc;
                modeloTabla.addRow(os);

            }
            TxtAreaResultSintact.append("-----------------------------------\n");
            TxtAreaResultSintact.append("\n FIN DEL ANÁLISIS SINTÁCTICO ");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_BtnAnalizarSintactActionPerformed

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
        // TODO add your handling code here:
        Object os[] = new Object[5];
//        DefaultTableModel modeloPila = (DefaultTableModel) jTablePila.getModel();
        //modeloPila.setNumRows(0);
        String Cad1 = new String();
        String Cad2 = new String();
        String Cad3 = new String();
        String Cad4 = new String();
        String Cad5 = new String();
        jTextAreaResultados.setText("");
        os[0] = Cad1;
        os[1] = Cad2;
        os[2] = Cad3;
        os[3] = Cad4;
        os[4] = Cad5;
      /*  modeloPila.addRow(os);
        modeloPila.addRow(os);
        modeloPila.addRow(os);
        modeloPila.addRow(os);*
        modeloPila.fireTableDataChanged();*/
        Sintac.maquinaHoc4.execute(0);

    }//GEN-LAST:event_jButtonExecuteActionPerformed

    /*
    public static void main(String arg[]){
      FrmPrincipal2  frmInterfaz = new FrmPrincipal2();
      frmInterfaz.setVisible(true);
      frmInterfaz.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        FrmPrincipal2 frmInterfaz = new FrmPrincipal2();
        frmInterfaz.setVisible(true);
        //frmInterfaz.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        /* Create and display the form */
 /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal2().setVisible(true);
            }
         
        });*/
    }

    /**
     * @param args the command line arguments
     */
    public void PonerTextSintac(String texto) {
        TxtAreaResultSintact.append(texto);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAnalizarSintact;
    private javax.swing.JTextArea TextoAAnalizar;
    private javax.swing.JTextArea TxtAreaResultSintact;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableCodigo;
    private javax.swing.JTextArea jTextAreaResultados;
    private javax.swing.JLabel lblCadAnalizar;
    private javax.swing.JLabel lblCadAnalizar1;
    private javax.swing.JLabel lblCadAnalizar2;
    private javax.swing.JLabel lblCadAnalizar3;
    private javax.swing.JTextArea txtAreaTokens;
    // End of variables declaration//GEN-END:variables
}
